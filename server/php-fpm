###　Lightsailのphp-fpmのメモリを確認する時

#使用可能なメモリの確認

free -h


### PHPプロセスが確保している平均メモリ量の把握

ps -ylC php-fpm --sort:rss　　//rssにて表示する

###平均を求める（以下のコマンドbitnamiのパッケージで求めることができるか確認する。）
# ps --no-headers -o "rss,cmd" -C php-fpm | awk '{ sum+=$1 } END { printf ("%d%s\n", sum/NR/1024,"M") }'

###etc以下のディレクトリ配下でphp-fpmのコンフィグファイルを探す。

（推奨）

pm.max_children = 使用可能メモリ量 / プロセスの平均メモリ使用量
pm.start_servers = [25% of max_children]
pm.min_spare_servers = [25% of max_children]
pm.max_spare_servers = [75% of max_children]

pm.max_children = (* 1024) / M = 
pm.start_servers =  ×  =  = 
pm.min_spare_servers =  ×  =  =
pm.max_spare_servers = ×  =  = 

# vi /etc/php-fpm.d/www.conf
----------------------------------------
[www]
pm.max_children = 
pm.start_servers = 
pm.min_spare_servers = 
pm.max_spare_servers = 
----------------------------------------


####dynamic
起動数を動的に変更する方法。
通常時はある程度の数プロセスを起動しておきます。同時接続数が増え、プロセス数が足りなくなった時だけ、設定した範囲でプロセスが追加で起動されます

dynamic のほうが柔軟に処理能力を調整することができるので、より良いようにも思えます。しかし、プロセスはリクエストの処理中CPU1コアを占有するので、同時処理可能なリクエスト数はCPUの論理コア数に依存します。
したがって、一般的なサーバーの場合メモリやディスクの限界に達する前にCPUがボトルネックとなるので、あまり多くの数プロセスを起動しても意味がありません。

それならば、プロセスの動的な起動に伴うオーバーヘッドがないstaticを選択するほうが良い場合も多いそうです。

####pm.max_children
プロセスの最大起動数を表します。サーバーの同時接続可能数を決定します。
プロセス数制御がstaticの場合、常にここで指定された数のプロセスを起動します。この数値を超える同時接続があった場合、超えた分のリクエストは、他のリクエストの処理後に処理されるので、レスポンスタイムが悪化します。

ではこの設定を多くとっておいたらいいじゃんとなりますが、CPUのコア数を超えた設定をしても同時に実行できませんし、メモリ消費量が多ければ、swap領域を使用してします。なので使用するリソースに応じた値を設定することが必要です。

####pm.max_children = Webサーバー専用の合計RAM /最大子プロセスサイズ

####pm.max_requests
プロセスを再起動する処理リクエスト数を指します。
プロセスの肥大化で触れた通り、多くのリクエストを処理すると、プロセスで使用するメモリがどんどん増大していくことがあります。
これを防ぐために、一定数リクエストを処理したプロセスを自動で再起動させることができます。この設定では、そのリクエスト数を指定します

ー　各プロセスが1日に処理するリクエスト数は、1日のリクエスト（PV）数 ÷ pm.max_children
　　この割り出した値を設定する。

####pm.max_spare_servers
アイドル状態のプロセス最大起動数を指します。リクエストの処理を待機しているプロセスを、最大でいくつ起動しておくかという設定です。
この設定は、通常時に（アクセスのピーク時間帯以外に）常時起動するプロセスの最大数とも捉えることができます。したがって、通常時サーバーで動いている他のプロセスのリソースを奪わない程度の値を設定します。

####pm.min_spare_servers
アイドル状態のプロセス最小起動数を指します。リクエストの処理を待機しているプロセスを、最低限いくつ起動しておくかという設定です。この設定項目は、「新たなプロセスを起動せずにリクエストを処理する余裕」を最低限どの程度持っておくかということを決定します。

####pm.start_servers
親プロセスの開始時に起動する子プロセスの数です。この数値を基準にして、pm.max_spare_serversとpm.min_spare_serversをもとにプロセス数が決定されます。



